Assignment 4 Due 11:59PM April 17

This assignment involves more thinking than typing. You are not going to write
a lot of code. But you have to figure out how to write that little code you will 
write.

There are two kinds of Writers: StringWriter which writes to a String
and FileWriter that writes to a file (these are not related to 
those classes provided in Java/C#, etc.). There can be other types of
Writers (like SocketWriter that writes to a Socket) in the future.

A Writer simply writes to a target (like string or file).

You can find out what was written to a StringWriter by calling a
function. You can find out what was written to a file, using a 
FileWriter, by reading the file written to.

There are several types of operations that can be performed on writers. For example:

lower case: This converts the string being written to all lower case

upper case: This converts the string being written to all upper case

stupid replacer: This replaces the word stupid (only in lower case) to s*****

duplicate remover: This removes consecutive duplicated words. 
For example, "This is is it" will replaced by "This is it" when this function is applied.

Design so that other such functions may be added in the future, but without changing any existing class.

The user of your design will pick and choose what kinds of operations they want to use or combine to use.
For example, I may be interested in combining the stupid replacer and the lower case operation when
writing to a String. I may also be interested in combining the duplicate remover and the upper case operation
when writing to a file. I may chose to use any combination of these operations at will.

You can imagine an operation like this (pseudocode):

writeToWriter(Writer writer) {
  writer.write("This is really really stupid!!!")
}

If I had combined the operations of duplicate remover, stupid replacer, and if the writer is targeting a file 
(say myfile.dat), then the file myfile.dat would contain the content

This is really s*****!!!

Grading:
Total [100]:  97
Program runs [20]:
All tests pass [20]:
Test quality [10]:
Code coverage [10]:
Code quality [20]:
Design quality [20]: -3
DuplicateRemover - quite smelly. Need to refactor.